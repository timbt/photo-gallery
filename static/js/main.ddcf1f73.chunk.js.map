{"version":3,"sources":["config.js","Upload.tsx","DisplayPicture.tsx","App.tsx","index.tsx"],"names":["API_URL","Upload","useState","image","setImage","title","setTitle","redirectID","setRedirectID","submitImage","e","a","preventDefault","filetype","file","type","axios","post","response","data","id","signedURL","put","alert","submissionForm","onSubmit","value","onChange","target","placeholder","redirectElement","to","newImage","files","reader","FileReader","onloadend","undefined","previewSrc","result","toString","readAsDataURL","src","alt","hidden","DisplayPicture","pictureID","useParams","loadFailed","setLoadFailed","picture","setPicture","get","loadPicture","url","App","basename","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAAaA,EAAU,2CCiGRC,MAtFf,WAAmB,IAAD,EAEYC,mBAAoB,IAFhC,mBAEPC,EAFO,KAEAC,EAFA,OAGYF,mBAAS,IAHrB,mBAGPG,EAHO,KAGAC,EAHA,OAIsBJ,mBAAS,IAJ/B,mBAIPK,EAJO,KAIKC,EAJL,KAyBRC,EAAW,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGhBD,EAAEE,iBAHc,SAONC,EAAWV,EAAMW,KAAMC,KAPjB,SAWWC,IAAMC,KAAN,UAAcjB,EAAd,WAAgC,CACnDa,WAAUR,UAZF,cAWNa,EAXM,SAccA,EAASC,KAA3BC,EAdI,EAcJA,GAAIC,EAdA,EAcAA,UAdA,SAiBNL,IAAMM,IAAID,EAAWlB,EAAMW,MAjBrB,OAoBZN,EAAcY,GApBF,kDAwBZG,MAAM,0BAxBM,0DAAH,sDA8BXC,EAAiBrB,EAAMW,KAErB,uBAAMW,SAAU,SAAAf,GAAC,OAAID,EAAYC,IAAjC,UACI,uBAAOK,KAAK,OAAOW,MAAOrB,EAAOsB,SAAU,SAAAjB,GAAC,OAAIJ,EAASI,EAAEkB,OAAOF,QAAQG,YAAY,qBACtF,uBAAOd,KAAK,SAASW,MAAM,cAE/B,KAIFI,EAAkBvB,EAAa,cAAC,IAAD,CAAUwB,GAAE,WAAMxB,KAAmB,KAE1E,OACI,gCAEKuB,EAED,iDACA,uBAAOf,KAAK,OAAOY,SAjET,SAACjB,GAGf,IAAMsB,EAAWtB,EAAEkB,OAAOK,MAAQvB,EAAEkB,OAAOK,MAAM,GAAK,KAGlDC,EAAS,IAAIC,WACjBD,EAAOE,UAAY,WACfhC,EAAS,CACLU,KAAMkB,QAAsBK,EAC5BC,WAAYJ,EAAOK,OAASL,EAAOK,OAAOC,gBAAaH,KAE3DL,GAAUE,EAAOO,cAAcT,MAuD/B,8BACI,qBAAKU,IAAKvC,EAAMmC,WAAYK,IAAI,UAAUC,QAAQzC,EAAMmC,eAG3Dd,MCjCEqB,MA7Cf,WAA2B,IAEfC,EAAcC,cAAdD,UAFc,EAGgB5C,oBAAS,GAHzB,mBAGd8C,EAHc,KAGFC,EAHE,OAIU/C,mBAAuB,MAJjC,mBAIdgD,EAJc,KAILC,EAJK,KAwBtB,OAFgB,OAAZD,IAAmC,IAAfF,GAfP,uCAAG,4BAAArC,EAAA,+EAIWK,IAAMoC,IAAN,UAAapD,EAAb,YAAwB8C,IAJnC,OAIN5B,EAJM,OAKZiC,EAAWjC,EAASC,MALR,gDASZ8B,GAAc,GATF,yDAAH,oDAe6BI,GAE1CL,EAEO,iEAAoCF,KAEpCI,EAGH,gCACI,6BAAKA,EAAQ7C,QACb,qBAAKqC,IAAKQ,EAAQI,IAAKX,IAAKO,EAAQ7C,WAMrC,oDC7BAkD,MAjBf,WACE,OACE,cAAC,IAAD,CAAQC,SAAS,iBAAjB,SAEE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAO,cAAd,SACE,cAAC,EAAD,YCVVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ddcf1f73.chunk.js","sourcesContent":["export const API_URL = 'https://serene-spire-68454.herokuapp.com';","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {API_URL } from './config';\r\n\r\n// Stores an uploaded image and its data URL preview\r\ninterface UserImage {\r\n    file?: File,\r\n    previewSrc?: string\r\n}\r\n\r\nfunction Upload() {\r\n\r\n    const [image, setImage] = useState<UserImage>({});\r\n    const [title, setTitle] = useState(\"\");\r\n    const [redirectID, setRedirectID] = useState(\"\");\r\n\r\n    /* Handles storing an uploaded image in the component's state and creating\r\n     * a visible preview for the image */\r\n    const loadImage = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n        // Update the component's state to reflect the new image\r\n        const newImage = e.target.files ? e.target.files[0] : null;\r\n\r\n        // Load the image preview\r\n        let reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            setImage({\r\n                file: newImage ? newImage : undefined,\r\n                previewSrc: reader.result ? reader.result.toString() : undefined});\r\n        };\r\n        if (newImage) reader.readAsDataURL(newImage);\r\n\r\n    };\r\n\r\n    /** Handles submitting an image to the server */\r\n    const submitImage = async (e : React.FormEvent<HTMLFormElement>) => {\r\n\r\n        // Prevent page reload on submission\r\n        e.preventDefault();\r\n    \r\n        try {\r\n            // Get the filetype (needed for signed URL creation)\r\n            const filetype = image.file!.type;\r\n\r\n            // Create image record in application database, and get a signed\r\n            // URL for file upload\r\n            const response = await axios.post(`${API_URL}/upload`, {\r\n                filetype, title\r\n            });\r\n            const { id, signedURL } = response.data;\r\n\r\n            // Upload the image to S3\r\n            await axios.put(signedURL, image.file);\r\n\r\n            // Redirect to uploaded image\r\n            setRedirectID(id);\r\n\r\n        } catch (e) {\r\n\r\n            alert(\"Could not upload image\")\r\n        }\r\n        \r\n    };\r\n\r\n    // Submission form will be rendered only if an image has been provided\r\n    const submissionForm = image.file ? \r\n        (\r\n            <form onSubmit={e => submitImage(e)}>\r\n                <input type=\"text\" value={title} onChange={e => setTitle(e.target.value)} placeholder=\"Title your image\" />\r\n                <input type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n        ) : null;\r\n\r\n    \r\n    // Will redirect to uploaded image after upload\r\n    const redirectElement = redirectID ? <Redirect to={`/${redirectID}`} /> : null;\r\n\r\n    return (\r\n        <div>\r\n\r\n            {redirectElement}\r\n\r\n            <h1>Upload an image</h1>\r\n            <input type=\"file\" onChange={loadImage}/>\r\n\r\n            <div>\r\n                <img src={image.previewSrc} alt=\"preview\" hidden={image.previewSrc ? false : true} />\r\n            </div>\r\n\r\n            {submissionForm}\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Upload;\r\n","import React, { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { API_URL } from './config';\r\n\r\ninterface Picture {\r\n    title: string,\r\n    description: string,\r\n    url: string,\r\n    uploaded: Date\r\n}\r\n\r\nfunction DisplayPicture() {\r\n\r\n    const { pictureID } = useParams<{pictureID : string}>();\r\n    const [ loadFailed, setLoadFailed ] = useState(false);\r\n    const [ picture, setPicture ] = useState<Picture|null>(null); \r\n    \r\n\r\n    const loadPicture = async () => {\r\n\r\n        try {\r\n\r\n            const response = await axios.get(`${API_URL}/${pictureID}`);\r\n            setPicture(response.data);\r\n\r\n        } catch (e) {\r\n\r\n            setLoadFailed(true);\r\n\r\n        }\r\n    \r\n    };\r\n\r\n    if (picture === null && loadFailed === false) loadPicture();\r\n\r\n    if (loadFailed) {\r\n\r\n        return <p>Could not find picture with ID ${pictureID}</p>;\r\n\r\n    } else if (picture) {\r\n\r\n        return (\r\n            <div>\r\n                <h1>{picture.title}</h1>\r\n                <img src={picture.url} alt={picture.title} />\r\n            </div>\r\n        );\r\n\r\n    } else {\r\n\r\n        return <p>Loading picture...</p>;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default DisplayPicture;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, useParams } from 'react-router-dom';\nimport Upload from './Upload';\nimport DisplayPicture from './DisplayPicture';\n\nfunction App() {\n  return (\n    <Router basename=\"/photo-gallery\">\n\n      <Switch>\n        <Route exact path=\"/\">\n          <Upload />\n        </Route>\n        <Route path = \"/:pictureID\">\n          <DisplayPicture />\n        </Route>\n      </Switch>\n\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}